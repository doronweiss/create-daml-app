module DemoLayout where
-- import DA.Date

import Authority
-- import Citizen

-- *** CovidDetection ***
template CovidDetection with
    id : Int
    detected : Bool
    healthEmployeeRoleCID : ContractId AuthorityEmployeeRole
    healthOffice : Party
    observers : [Party]
  where
    signatory healthOffice
    observer observers
    -- key (health, id)

    -- ContractId CovidDetection
    choice MarkAsHealthy : ContractId CovidDetection with
        healthEmployeeRoleNewCid : ContractId AuthorityEmployeeRole
      controller healthOffice
      do
        healthEmployeeRoleNew <- fetch healthEmployeeRoleNewCid
        assert (healthEmployeeRoleNew.office == GOHealth)
        -- assert (healthEmployeeRole_active == healthEmployeeRole)
        create this with
          detected = False
          healthEmployeeRoleCID = healthEmployeeRoleNewCid
    
    choice AddCovidObservers : ContractId CovidDetection with
        newObservers : [Party]
      controller healthOffice
      do
        create this with
          observers = observers ++ newObservers

    choice RemoveCovidObservers : ContractId CovidDetection with
        newObservers : [Party]
      controller healthOffice
      do
        let
          fltrd = [x | x <- observers, notElem x  newObservers]
        create this with
          observers = fltrd


          
template CovidProposal with
    id : Int -- "id05660001"
    healthOffice : Party 
    hlsOffice : Party 
  where
    signatory hlsOffice
    observer healthOffice

    choice CovidProposalAccept : ContractId CovidDetection with
        healthEmployeeRoleCid : ContractId AuthorityEmployeeRole
        borderCtrl : Party
      controller healthOffice 
      do
        -- healthEmployeeRole <- fetch healthEmployeeRoleCid
        -- assert (healthEmployeeRole.office == GOHealth)
        -- assert (healthEmployeeRole.officeParty == healthOffice)
        create  CovidDetection with
          id = id
          detected = True
          healthEmployeeRoleCID = healthEmployeeRoleCid
          healthOffice = healthOffice
          observers = [borderCtrl, healthEmployeeRole.officeParty]
    
    -- ContractId CovidDetection
    choice CovidProposalReject :  () with
        healthEmployeeRoleCid : ContractId AuthorityEmployeeRole
      controller healthOffice
      do
        healthEmployeeRole <- fetch healthEmployeeRoleCid
        assert (healthEmployeeRole.office == GOHealth)
        assert (healthEmployeeRole.officeParty == healthOffice)

-- *** AlimonyIssues ***
template AlimonyIssue with
    id : Int
    hasIssues : Bool
    internalAffairsEmployeeRoleCid : ContractId AuthorityEmployeeRole
    internalAffairsOffice : Party
    observers : [Party]
  where
    signatory internalAffairsOffice
    observer observers
    -- key (health, id)

    -- ContractId CovidDetection
    choice MarkAsNoIssues : ContractId AlimonyIssue with
        internalAffairsEmployeeRoleNewCid : ContractId AuthorityEmployeeRole
      controller internalAffairsOffice
      do
        internalAffairsEmployeeRoleNew <- fetch internalAffairsEmployeeRoleNewCid
        assert (internalAffairsEmployeeRoleNew.office == GOInternalAffairs)
        create this with
          hasIssues = False
          internalAffairsEmployeeRoleCid = internalAffairsEmployeeRoleNewCid
    
    choice AddAlimonyObservers : ContractId AlimonyIssue with
        newObservers : [Party]
      controller internalAffairsOffice
      do
        create this with
          observers = observers ++ newObservers

    choice RemoveAlimonyObservers : ContractId AlimonyIssue with
        newObservers : [Party]
      controller internalAffairsOffice
      do
        let
          fltrd = [x | x <- observers, notElem x  newObservers]
        create this with
          observers = fltrd


          
template AlimonyProposal with
    id : Int -- "id05660001"
    internalAffairsOffice : Party 
    wellfareOffice : Party
  where
    signatory wellfareOffice
    observer internalAffairsOffice

    choice AlimonyProposalAccept : ContractId AlimonyIssue with
        internalAffairsEmployee : Party
        internalAffairsEmployeeRoleCid : ContractId AuthorityEmployeeRole
        borderCtrl : Party
      controller internalAffairsEmployee 
      do
        internalAffairsEmployeeRole <- fetch internalAffairsEmployeeRoleCid
        assert (internalAffairsEmployeeRole.office == GOInternalAffairs)
        assert (internalAffairsEmployeeRole.officeParty == internalAffairsOffice)
        create  AlimonyIssue with
          id = id
          hasIssues = True
          internalAffairsEmployeeRoleCid = internalAffairsEmployeeRoleCid
          internalAffairsOffice = internalAffairsOffice
          observers = [borderCtrl, internalAffairsEmployee]
    
    -- ContractId CovidDetection
    choice AlimonyProposalReject :  () with
        internalAffairsEmployeeRoleCid : ContractId AuthorityEmployeeRole
      controller internalAffairsOffice
      do
        internalAffairsEmployeeRole <- fetch internalAffairsEmployeeRoleCid
        assert (internalAffairsEmployeeRole.office == GOInternalAffairs)
        assert (internalAffairsEmployeeRole.officeParty == internalAffairsOffice)


test = scenario do
  superuser <- getParty "superuser"
  healthOffice <- getParty "healthOffice"
  borderCtrl <- getParty "borderCtrl"
  internalAffairsOffice <- getParty "internalAffairsOffice"
  wellfareOffice <- getParty "wellfareOffice"
  hlsOffice <- getParty "hlsOffice"
  do
    eHLS <- submit superuser do 
      create AuthorityEmployeeRole with
        superUser = superuser
        office = GOHLS
        officeParty = hlsOffice
        name = "hls employee"
    eHealth <- submit superuser do 
      create AuthorityEmployeeRole with
        superUser = superuser
        office = GOHealth
        officeParty = healthOffice
        name = "health employee"
    eBC <- submit superuser do 
      create AuthorityEmployeeRole with
        superUser = superuser
        office = GOBorderControl
        officeParty = borderCtrl
        name = "borderCtrl employee"
    cvProp <- submit hlsOffice do 
      create CovidProposal with
        id=5660001
        healthOffice = healthOffice
        hlsOffice = hlsOffice
    submit healthOffice do
      exercise cvProp CovidProposalAccept with
        healthEmployeeRoleCid = eHealth
        borderCtrl = borderCtrl


