module DemoLayout where
-- import DA.Date

import Authority
import Citizen

-- *** CovidDetection ***
template CovidDetection with
    id : Int
    detected : Bool
    healthEmployeeRole : AuthorityEmployeeRole
    healthEmployeeRoleCid : ContractId AuthorityEmployeeRole
    observers : [Party]
  where
    signatory healthEmployeeRole.officeParty
    observer observers
    -- key (health, id)

    -- ContractId CovidDetection
    choice MarkAsHealthy : ContractId CovidDetection with
        healthEmployeeRoleNewCid : ContractId AuthorityEmployeeRole
      controller healthEmployeeRole.officeParty
      do
        healthEmployeeRoleNew <- fetch healthEmployeeRoleNewCid
        assert (healthEmployeeRoleNew.office == GOHealth)
        -- assert (healthEmployeeRole_active == healthEmployeeRole)
        create this with
          detected = False
          healthEmployeeRole = healthEmployeeRoleNew
          healthEmployeeRoleCid = healthEmployeeRoleNewCid
    
    choice AddCovidObservers : ContractId CovidDetection with
        newObservers : [Party]
      controller healthEmployeeRole.officeParty
      do
        create this with
          observers = observers ++ newObservers

    choice RemoveCovidObservers : ContractId CovidDetection with
        newObservers : [Party]
      controller healthEmployeeRole.officeParty
      do
        let
          fltrd = [x | x <- observers, notElem x  newObservers]
        create this with
          observers = fltrd


          
template CovidProposal with
    id : Int -- "id05660001"
    healthOffice : Party 
    hls : AuthorityEmployeeRole 
  where
    signatory hls.officeParty
    observer healthOffice

    choice CovidProposalAccept : ContractId CovidDetection with
        healthEmployee : Party
        healthEmployeeRoleCid : ContractId AuthorityEmployeeRole
        borderCtrl : Party
      controller healthEmployee 
      do
        healthEmployeeRole <- fetch healthEmployeeRoleCid
        assert (healthEmployeeRole.office == GOHealth)
        assert (healthEmployeeRole.officeParty == healthOffice)
        assert (healthEmployeeRole.employee == healthEmployee)
        create  CovidDetection with
          id = id
          detected = True
          healthEmployeeRole = healthEmployeeRole
          healthEmployeeRoleCid = healthEmployeeRoleCid
          observers = [borderCtrl, healthEmployeeRole.employee]
    
    -- ContractId CovidDetection
    choice CovidProposalReject :  () with
        healthEmployeeRoleCid : ContractId AuthorityEmployeeRole
      controller healthOffice
      do
        healthEmployeeRole <- fetch healthEmployeeRoleCid
        assert (healthEmployeeRole.office == GOHealth)
        assert (healthEmployeeRole.officeParty == healthOffice)

-- *** AlimonyIssues ***
template AlimonyIssue with
    id : Int
    hasIssues : Bool
    internalAffairsEmployeeRole : AuthorityEmployeeRole
    internalAffairsEmployeeRoleCid : ContractId AuthorityEmployeeRole
    observers : [Party]
  where
    signatory internalAffairsEmployeeRole.officeParty
    observer observers
    -- key (health, id)

    -- ContractId CovidDetection
    choice MarkAsNoIssues : ContractId AlimonyIssue with
        internalAffairsEmployeeRoleNewCid : ContractId AuthorityEmployeeRole
      controller internalAffairsEmployeeRole.officeParty
      do
        internalAffairsEmployeeRoleNew <- fetch internalAffairsEmployeeRoleNewCid
        assert (internalAffairsEmployeeRoleNew.office == GOInternalAffairs)
        create this with
          hasIssues = False
          internalAffairsEmployeeRole = internalAffairsEmployeeRoleNew
          internalAffairsEmployeeRoleCid = internalAffairsEmployeeRoleNewCid
    
    choice AddAlimonyObservers : ContractId AlimonyIssue with
        newObservers : [Party]
      controller internalAffairsEmployeeRole.officeParty
      do
        create this with
          observers = observers ++ newObservers

    choice RemoveAlimonyObservers : ContractId AlimonyIssue with
        newObservers : [Party]
      controller internalAffairsEmployeeRole.officeParty
      do
        let
          fltrd = [x | x <- observers, notElem x  newObservers]
        create this with
          observers = fltrd


          
template AlimonyProposal with
    id : Int -- "id05660001"
    internalAffairsOffice : Party 
    hls : AuthorityEmployeeRole 
  where
    signatory hls.officeParty
    observer internalAffairsOffice

    choice AlimonyProposalAccept : ContractId AlimonyIssue with
        internalAffairsEmployee : Party
        internalAffairsEmployeeRoleCid : ContractId AuthorityEmployeeRole
        borderCtrl : Party
      controller internalAffairsEmployee 
      do
        internalAffairsEmployeeRole <- fetch internalAffairsEmployeeRoleCid
        assert (internalAffairsEmployeeRole.office == GOInternalAffairs)
        assert (internalAffairsEmployeeRole.officeParty == internalAffairsOffice)
        assert (internalAffairsEmployeeRole.employee == internalAffairsEmployee)
        create  AlimonyIssue with
          id = id
          hasIssues = True
          internalAffairsEmployeeRole = internalAffairsEmployeeRole
          internalAffairsEmployeeRoleCid = internalAffairsEmployeeRoleCid
          observers = [borderCtrl, internalAffairsEmployeeRole.employee]
    
    -- ContractId CovidDetection
    choice AlimonyProposalReject :  () with
        internalAffairsEmployeeRoleCid : ContractId AuthorityEmployeeRole
      controller internalAffairsOffice
      do
        internalAffairsEmployeeRole <- fetch internalAffairsEmployeeRoleCid
        assert (internalAffairsEmployeeRole.office == GOInternalAffairs)
        assert (internalAffairsEmployeeRole.officeParty == internalAffairsOffice)
