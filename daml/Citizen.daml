module Citizen where

import Authority
--import Daml.Script

data CitizenName = CitizenName with 
  firstName : Text
  lastName : Text
    deriving (Eq, Show)

template CitizenHealth with
    healthOffice : Party
    id : Int
    hasCovid : Bool
  where
    signatory healthOffice
    key (healthOffice, id) : (Party : Int)
    maintainer key._1

    choice SetCovidState: ContractId Citizen with
        covidDetected: Bool
      controller healthOffice
      do
        assertMsg "No change required" (covidDetected /= hasCovid)
        create this with hasCovid = covidDetected

template CitizenWellfare with
    wellfareOffice : Party
    id : Int
    hasAlimonyIssues : Bool
  where
    signatory wellfareOffice
    key (wellfareOffice, id) : (Party : Int)
    maintainer key._1
    
    choice SetAlimonyState: ContractId Citizen with
        alimonyIssues: Bool
        wellfareOfficeRoleCid : ContractId WellfareRole
      controller wellfareOffice
      do
        wellfareRole <- fetch wellfareOfficeRoleCid
        assert (wellfareRole.party == wellfareOffice)
        
        assertMsg "No change required" (alimonyIssues /= hasAlimonyIssues)
        create this with hasAlimonyIssues = alimonyIssues


template CitizenRegistry with
    internalAffairs : Party
    healthOffice : Party
    wellfareOffice : Party
    citizens : [(Int, CitizenName)]
  where
    signatory internalAffairs
    observer [healthOffice, wellfareOffice]

-- MAIN_TEMPLATE_BEGIN
template Citizen with
    wellfareOffice : Party
    healthOffice: Party
    firstName : Text
    lastName : Text
    id : Int
    -- reasons to forbid leaving the country
    hasCovid : Bool
    hasAlimonyIssues : Bool
  where
    signatory wellfareOffice, healthOffice
-- MAIN_TEMPLATE_END

    --key anEntity: Party
    --maintainer key

    -- Set covid state
    choice SetCovidState: ContractId Citizen with
        covidDetected: Bool
      controller healthOffice
      do
        assertMsg "No change required" (covidDetected /= hasCovid)
        create this with hasCovid = covidDetected
    -- Set covid state END

    -- Set alimony state
    choice SetAlimonyState: ContractId Citizen with
        alimonyIssues: Bool
        wellfareOfficeRoleCid : ContractId WellfareRole
      controller wellfareOffice
      do
        wellfareRole <- fetch wellfareOfficeRoleCid
        assert (wellfareRole.party == wellfareOffice)
        
        assertMsg "No change required" (alimonyIssues /= hasAlimonyIssues)
        create this with hasAlimonyIssues = alimonyIssues
    -- Set alimony state END


ctTest = scenario do
  alice <- getParty "Alice"
  do
    submit alice do
      cc <- create Citizen with
        anEntity = alice
        firstName = "משה"
        lastName = "lastenton"
        id = 5550001
        hasCovid = False
        hasAlimonyIssues = False
      cc1 <- exercise cc SetCovidState with
        covidDetected = True
      exercise cc1 SetAlimonyState with
        alimonyIssues = True
      -- alices <- query @Citizen alice
      -- cc2 <- fst alices
      -- exercise cc2 SetAlimonyState with
      --   alimonyIssues = True
 
